---
layout:     post
title:      "Leetcode Topological Sort 类型整理 part01"
subtitle:   " \"Python Leetcode整理\""
date:       2020-09-16 12:00:00
author:     "TonyXu"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Python
    - Leetcode
    - Algorithm
---

## 207. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

### Example 1:

```
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take.
             To take course 1 you should have finished course 0. So it is possible.
```

### Example 2:

```
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take.
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
```

### 方法一

时间复杂度：O(n)

空间复杂度：O(1)

```
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        visited = [0] * numCourses
        adjacency = [[] for _ in range(numCourses)]
        def dfs(i):
            if visited[i] == 1:
                return  False
            visited[i] = 1
            for j in adjacency[i]:
                if not dfs(j):
                    return False
            visited[i] = 0
            return True
        for cur, pre in prerequisites:
            adjacency[cur].append(pre)
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True
```

## 210. Course Schedule II

There are a total of n courses you have to take labelled from 0 to n - 1.

Some courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

### Example 1:

```
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
```

### Example 2:

```
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
```

### Example 3:

```
Input: numCourses = 1, prerequisites = []
Output: [0]
```

### 方法一

时间复杂度：O(n)

空间复杂度：O(1)

```
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        visited = [0] * numCourses
        adjacency = [[] for _ in range(numCourses)]
        res = []
        def dfs(i):
            if visited[i] == 1:
                return False
            if visited[i] == -1:
                return True
            visited[i] = 1
            for j in adjacency[i]:
                if not dfs(j):
                    return False
            visited[i] = -1
            res.append(i)
            return True
        for cur, pre in prerequisites:
            adjacency[cur].append(pre)
        for i in range(numCourses):
            if not dfs(i):
                return []
        return res
```
